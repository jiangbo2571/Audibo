# Decompiled with PyLingual (https://pylingual.io)
# Internal filename: challenge.py
# Bytecode version: 3.10.0rc2 (3439)
# Source timestamp: 1970-01-01 00:00:00 UTC (0)

import binascii
import random
import string
import OpenSSL
from OpenSSL import crypto
import os

def get_random_unicode(length):
    try:
        get_char = unichr
    except NameError:
        get_char = chr
    include_ranges = [(128, 999)]
    alphabet = [get_char(code_point) for current_range in include_ranges for code_point in range(current_range[0], current_range[1] + 1)]
    return ''.join((random.choice(alphabet) for i in range(length)))
if __name__ == '__main__':
    print(' @ Audibo')
    print(' @ NOTE: Please put private.pem to root path of the generator.')
    print('-------------------------------------------------------------------------------')
    if os.path.exists('private.pem'):
        key_file = open('private.pem', 'r')
        key = key_file.read()
        key_file.close()
        pkey = crypto.load_privatekey(crypto.FILETYPE_PEM, key)
        challenge = input(' [CHALLENGE] ')
        if challenge:
            challenge_array = challenge.split('0A')
            print('-------------------------------------------------------------------------------')
            random_data = challenge_array[1]
            random_string = get_random_unicode(9)
            random_string2 = ''.join((random.choice(string.punctuation + string.whitespace) for i in range(5)))
            data = (binascii.unhexlify(random_data).decode('utf-8') + '\n' + random_string + binascii.unhexlify(challenge_array[3]).decode('utf-8') + '\n' + binascii.unhexlify(challenge_array[2]).decode('utf-8')).encode('utf-8')
            sign = OpenSSL.crypto.sign(pkey, data, 'sha256')
            print(' [RESPONSE] ' + random_data + '0A' + binascii.hexlify(random_string.encode('utf-8')).decode('utf-8').upper() + binascii.hexlify(random_string2.encode('utf-8')).decode('utf-8').upper() + sign.hex().upper())
            input('\n Press enter to exit')
        else:
            print(' [!] CHALLENGE COULD NOT BE EMPTY ...')
            input('\n Press enter to exit')
    else:
        print(' [!] private.pem not found ...')
        input('\n Press enter to exit')
