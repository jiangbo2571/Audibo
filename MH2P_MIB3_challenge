# Audibo Challenge Response Generator v2.0 (精简版)
import binascii
import random
import string
import os
import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.serialization import load_pem_private_key
import pyperclip
import webbrowser

class AudiboGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Audibo Challenge Response Generator v2.0")
        self.root.geometry("800x600")
        self.private_key = None
        self.key_file_path = None
        self.theme = "light"  # Default theme
        
        # Initialize UI
        self.create_widgets()
        self.load_default_private_key()
        self.create_menu()
        
    def create_menu(self):
        menubar = tk.Menu(self.root)
        
        # File menu
        file_menu = tk.Menu(menubar, tearoff=0)
        file_menu.add_command(label="Load Private Key", command=self.load_custom_private_key)
        file_menu.add_separator()
        file_menu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=file_menu)
        
        # View menu
        view_menu = tk.Menu(menubar, tearoff=0)
        view_menu.add_command(label="Light Theme", command=lambda: self.set_theme("light"))
        view_menu.add_command(label="Dark Theme", command=lambda: self.set_theme("dark"))
        menubar.add_cascade(label="View", menu=view_menu)
        
        # Help menu
        help_menu = tk.Menu(menubar, tearoff=0)
        help_menu.add_command(label="Documentation", command=self.open_docs)
        help_menu.add_command(label="About", command=self.show_about)
        menubar.add_cascade(label="Help", menu=help_menu)
        
        self.root.config(menu=menubar)
    
    def create_widgets(self):
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title label
        title_frame = ttk.Frame(main_frame)
        title_frame.pack(fill=tk.X, pady=10)
        
        self.logo_img = tk.PhotoImage(width=1, height=1)  # Placeholder for logo
        logo_label = ttk.Label(title_frame, image=self.logo_img)
        logo_label.pack(side=tk.LEFT, padx=5)
        
        title_label = ttk.Label(
            title_frame, 
            text="Audibo Challenge Response Generator v2.0",
            font=('Helvetica', 14, 'bold')
        )
        title_label.pack(side=tk.LEFT)
        
        # Key info frame
        key_frame = ttk.LabelFrame(main_frame, text="Private Key Information", padding=10)
        key_frame.pack(fill=tk.X, pady=5)
        
        self.key_status_label = ttk.Label(
            key_frame, 
            text="No private key loaded",
            font=('Helvetica', 10)
        )
        self.key_status_label.pack(anchor=tk.W)
        
        self.key_path_label = ttk.Label(
            key_frame, 
            text="",
            font=('Helvetica', 8)
        )
        self.key_path_label.pack(anchor=tk.W)
        
        # Challenge input
        challenge_frame = ttk.Frame(main_frame)
        challenge_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(challenge_frame, text="Challenge:").pack(side=tk.LEFT)
        self.challenge_entry = ttk.Entry(challenge_frame, width=70)
        self.challenge_entry.pack(side=tk.LEFT, padx=5, expand=True, fill=tk.X)
        
        # Buttons frame
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.pack(fill=tk.X, pady=10)
        
        # Generate button
        generate_btn = ttk.Button(
            buttons_frame, 
            text="Generate Response", 
            command=self.generate_response,
            style='Accent.TButton'
        )
        generate_btn.pack(side=tk.LEFT, padx=5)
        
        # Copy button
        copy_btn = ttk.Button(
            buttons_frame, 
            text="Copy to Clipboard", 
            command=self.copy_to_clipboard
        )
        copy_btn.pack(side=tk.LEFT, padx=5)
        
        # Clear button
        clear_btn = ttk.Button(
            buttons_frame, 
            text="Clear", 
            command=self.clear_fields
        )
        clear_btn.pack(side=tk.LEFT, padx=5)
        
        # Response display
        response_frame = ttk.LabelFrame(main_frame, text="Response", padding=5)
        response_frame.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.response_text = scrolledtext.ScrolledText(
            response_frame, 
            width=80, 
            height=15,
            font=('Courier', 10)
        )
        self.response_text.pack(fill=tk.BOTH, expand=True)
        
        # Status bar
        self.status_var = tk.StringVar()
        self.status_var.set("Ready")
        status_bar = ttk.Label(
            main_frame, 
            textvariable=self.status_var,
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        status_bar.pack(fill=tk.X, pady=(10, 0))
        
        # Configure styles
        self.style = ttk.Style()
        self.style.configure('Accent.TButton', font=('Helvetica', 10, 'bold'))
        
    def set_theme(self, theme):
        """Set light or dark theme"""
        self.theme = theme
        if theme == "dark":
            self.root.configure(bg='#333333')
            self.style.configure('TFrame', background='#333333')
            self.style.configure('TLabel', background='#333333', foreground='white')
            self.style.configure('TButton', background='#555555', foreground='white')
            self.style.configure('Accent.TButton', background='#0078D7', foreground='white')
            self.style.configure('TEntry', fieldbackground='#555555', foreground='white')
            self.style.configure('TLabelFrame', background='#333333', foreground='white')
            self.response_text.configure(bg='#555555', fg='white', insertbackground='white')
        else:
            self.root.configure(bg='SystemButtonFace')
            self.style.configure('TFrame', background='SystemButtonFace')
            self.style.configure('TLabel', background='SystemButtonFace', foreground='black')
            self.style.configure('TButton', background='SystemButtonFace', foreground='black')
            self.style.configure('Accent.TButton', background='#0078D7', foreground='white')
            self.style.configure('TEntry', fieldbackground='white', foreground='black')
            self.style.configure('TLabelFrame', background='SystemButtonFace', foreground='black')
            self.response_text.configure(bg='white', fg='black', insertbackground='black')
    
    def load_default_private_key(self):
        """Load the private key from default location (private.pem)"""
        if os.path.exists('private.pem'):
            self.load_private_key('private.pem')
    
    def load_custom_private_key(self):
        """Load private key from user-selected file"""
        file_path = filedialog.askopenfilename(
            title="Select Private Key File",
            filetypes=[("PEM files", "*.pem"), ("All files", "*.*")]
        )
        if file_path:
            self.load_private_key(file_path)
    
    def load_private_key(self, file_path):
        """Load the private key from specified file"""
        try:
            with open(file_path, 'rb') as key_file:
                self.private_key = load_pem_private_key(
                    key_file.read(),
                    password=None,
                    backend=default_backend()
                )
            self.key_file_path = file_path
            self.key_status_label.config(text="Private key loaded successfully")
            self.key_path_label.config(text=f"Key path: {file_path}")
            self.status_var.set(f"Private key loaded from {os.path.basename(file_path)}")
        except Exception as e:
            messagebox.showerror(
                "Error", 
                f"Failed to load private key: {str(e)}"
            )
            self.key_status_label.config(text="Private key load failed")
            self.key_path_label.config(text="")
            self.status_var.set("Error loading private key")
    
    def get_random_unicode(self, length):
        """Generate random Unicode characters from specified ranges"""
        try:
            get_char = chr  # Python 3
        except NameError:
            get_char = unichr  # Python 2
            
        include_ranges = [(128, 999)]
        alphabet = [
            get_char(code_point) 
            for current_range in include_ranges 
            for code_point in range(current_range[0], current_range[1] + 1)
        ]
        return ''.join(random.choice(alphabet) for _ in range(length))
    
    def generate_response(self):
        """Generate the response from the challenge"""
        challenge = self.challenge_entry.get().strip()
        
        if not challenge:
            messagebox.showwarning("Warning", "Challenge cannot be empty")
            self.status_var.set("Error: Challenge is empty")
            return
        
        if not self.private_key:
            messagebox.showerror("Error", "Private key not loaded")
            self.status_var.set("Error: Private key not loaded")
            return
            
        try:
            challenge_array = challenge.split('0A')
            if len(challenge_array) < 4:
                raise ValueError("Invalid challenge format - expected 4 segments separated by 0A")
                
            random_data = challenge_array[1]
            
            # Generate random components
            random_string = self.get_random_unicode(9)
            random_string2 = ''.join(
                random.choice(string.punctuation + string.whitespace) 
                for _ in range(5)
            )
            
            # Construct the data to be signed
            data_parts = [
                binascii.unhexlify(random_data).decode('utf-8'),
                '\n' + random_string + binascii.unhexlify(challenge_array[3]).decode('utf-8'),
                '\n' + binascii.unhexlify(challenge_array[2]).decode('utf-8')
            ]
            data = ''.join(data_parts).encode('utf-8')
            
            # Generate the signature
            signature = self.private_key.sign(
                data,
                padding.PKCS1v15(),
                hashes.SHA256()
            )
            
            # Build the response
            response_parts = [
                random_data,
                '0A',
                binascii.hexlify(random_string.encode('utf-8')).decode('utf-8').upper(),
                binascii.hexlify(random_string2.encode('utf-8')).decode('utf-8').upper(),
                signature.hex().upper()
            ]
            response = ''.join(response_parts)
            
            # Display the response
            self.response_text.delete(1.0, tk.END)
            self.response_text.insert(tk.END, response)
            self.status_var.set("Response generated successfully")
            
        except Exception as e:
            messagebox.showerror(
                "Error", 
                f"Failed to process challenge: {str(e)}"
            )
            self.status_var.set(f"Error: {str(e)}")
    
    def copy_to_clipboard(self):
        """Copy the response to clipboard"""
        response = self.response_text.get(1.0, tk.END).strip()
        if response:
            pyperclip.copy(response)
            self.status_var.set("Response copied to clipboard")
        else:
            messagebox.showwarning("Warning", "No response to copy")
            self.status_var.set("Warning: No response to copy")
    
    def clear_fields(self):
        """Clear all input and output fields"""
        self.challenge_entry.delete(0, tk.END)
        self.response_text.delete(1.0, tk.END)
        self.status_var.set("Fields cleared")
    
    def open_docs(self):
        """Open documentation in web browser"""
        webbrowser.open("https://github.com/jiangbo2571/MH2P_MIB3_challenge-tools")
    
    def show_about(self):
        """Show about dialog"""
        about_text = """Audibo Challenge Response Generator v2.0

A secure tool for generating signed responses to Audibo challenges.

Features:
- Load private keys from any location
- Light/dark theme support
- Copy to clipboard functionality

© 2023 Audibo Security Team"""
        messagebox.showinfo("About", about_text)

def main():
    root = tk.Tk()
    app = AudiboGeneratorApp(root)
    root.mainloop()

if __name__ == '__main__':
    main()
